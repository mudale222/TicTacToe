using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;

namespace ticTacToe2 {
    class Program {
        static int BOARD_SIZE = 7;
        static string[][] BOARD;
        static int STRAIGHT = 4;
        static string USERSYMBOL = "";
        static string COMPUTERSYMBOL = "";
        enum Score {
            Win = 100,
            Draw = 0,
            Loose = -100
        }



        static void Main(string[] args) {
            var algo = new Algo();
            Console.WriteLine("WELCOME TO TicTacToe!!!");//\nTo quit the game please enter 'quit'.");
            var input = "";
            do {
                Console.WriteLine("Do u want to start ('yes/'no')? ");
                input = Console.ReadLine();
                bool user_start = (input == "yes") ? true : false;
                algo.startGame(user_start);
            } while (input != "quit");
            Graphic.print();
        }

        class Graphic {
            //int
            public static void print() {
                for (var i = 0; i < BOARD_SIZE; i++) {
                    Console.WriteLine();
                    for (var j = 0; j < BOARD_SIZE; j++) {
                        if (j < BOARD_SIZE - 1)
                            Console.Write(" " + BOARD[i][j] + " |");
                        else
                            Console.Write(" " + BOARD[i][j] + " ");

                    }
                    Console.WriteLine();
                    if (i < BOARD_SIZE - 1) {
                        for (var k = 0; k < BOARD_SIZE * 4 - 1; k++)
                            Console.Write((char)95);
                        Console.WriteLine();
                    }
                }
                Console.WriteLine();
            }
        }

        class Algo {
            static bool ENDGAME = false;
            public Algo() {
                MakeNewBoard();
            }

            private void MakeNewBoard() {
                BOARD = new string[BOARD_SIZE][];
                for (var i = 0; i < BOARD.Length; i++)
                    BOARD[i] = new string[BOARD_SIZE];
                for (var i = 0; i < BOARD_SIZE; i++) {
                    for (var j = 0; j < BOARD_SIZE; j++) {
                        BOARD[i][j] = " ";
                    }
                }
            }

            public void startGame(bool user_first) {
                ENDGAME = false;
                if (user_first) {
                    USERSYMBOL = "X"; COMPUTERSYMBOL = "O";
                    while (!ENDGAME) {
                        handleUser();
                        if (!ENDGAME)
                            handleComputer();
                    }
                }
                else {
                    USERSYMBOL = "O"; COMPUTERSYMBOL = "X";
                    while (!ENDGAME) {
                        handleComputer();
                        if (!ENDGAME)
                            handleUser();
                    }
                }
            }

            private bool BoardFull() {
                var counter = 0;
                for (var i = 0; i < BOARD.Length; i++)
                    for (var j = 0; j < BOARD[i].Length; j++)
                        if (BOARD[i][j] != " ")
                            counter++;
                if (counter == BOARD.Length * BOARD.Length)
                    return true;
                return false;
            }

            private void EndGame(string XorOorDraw) {
                Graphic.print();
                if (XorOorDraw == USERSYMBOL)
                    Console.WriteLine("OH U BRAVE HERO!! U WON!!!! CONGRAT!!!");
                else if (XorOorDraw == COMPUTERSYMBOL)
                    Console.WriteLine("OH U POOR BASTARD!!! BETTER LUCK NEXT TIME!!!");
                else if (XorOorDraw == "draw")
                    Console.WriteLine("JESUS! WHO COULD ANTICIPATE IT???!! DRAW!");
                //Graphic.print();
                ENDGAME = true;
                MakeNewBoard();
            }

            public void handleUser() {
                Graphic.print();
                Console.WriteLine("Please enter location for move (for example: 1 3 = x-1 y-3): ");
                var user_input = Console.ReadLine();
                if (user_input.Length == 3 &&
                    int.TryParse(user_input[0].ToString(), out int y) && int.TryParse(user_input[2].ToString(), out int x)
                   && (x >= 0 && y >= 0 && x < BOARD_SIZE && y < BOARD_SIZE) && BOARD[x][y] == " ")
                    BOARD[x][y] = USERSYMBOL.ToString();
                else {
                    Console.WriteLine("Worng input!!! try again...");
                    handleUser();
                }
                CheckEndGame();
            }
            public void handleComputer() {
                int x = -1, y = -1;
                if (CanWin(ref x, ref y)) {
                    BOARD[x][y] = COMPUTERSYMBOL;
                    Console.WriteLine("Computer -   X:  " + y + "    Y:  " + x);
                }
                else if (AvoidLoose(ref x, ref y)) {
                    BOARD[x][y] = COMPUTERSYMBOL;
                    Console.WriteLine("Computer -   X:  " + y + "    Y:  " + x);
                }
                else
                    TryWin();
                CheckEndGame();
            }

            private void TryWin() {
                if (OnlyOneLeft(out int x, out int y)) {
                    BOARD[x][y] = COMPUTERSYMBOL;
                    return;
                }
                var depth = 0;
                MiniMax(BOARD, depth, COMPUTERSYMBOL);



                //for (var i = 0; i < BOARD.Length; i++) {
                //    for (var j = 0; j < BOARD[i].Length; j++) {
                //        if (BOARD[i][j] == " ") {
                //            BOARD[i][j] = "O";
                //            Console.WriteLine("Computer -   X:  " + j + "    Y:  " + i);
                //            return;
                //        }
                //    }
                //}

            }

            private int MiniMax(string[][] bOARD, int depth, string whosTurn) {
                //if (OnlyOneLeft(out int x, out int y)) {
                //    BOARD[x][y] = COMPUTERSYMBOL;
                //    return (int)Score.Win;
                //}


                if (whosTurn == COMPUTERSYMBOL) {
                    var score = -5000;
                    for (var i = 0; i < BOARD.Length; i++) {
                        for (var j = 0; j < BOARD[i].Length; j++) {
                            if (BOARD[i][j] == " ") {
                                var temp_score = MiniMax(BOARD, depth + 1, USERSYMBOL);
                                if (temp_score > score)
                                    score = temp_score;
                            }
                        }
                    }
                    return score;
                }

                else {
                    var score = 5000;
                    for (var i = 0; i < BOARD.Length; i++) {
                        for (var j = 0; j < BOARD[i].Length; j++) {
                            if (BOARD[i][j] == " ") {
                                var temp_score = MiniMax(BOARD, depth + 1, COMPUTERSYMBOL);
                                if (temp_score < score)
                                    score = temp_score;
                            }
                        }
                    }
                    return score;
                }

                //return bestScore;
            }

            private bool OnlyOneLeft(out int x, out int y) {
                var counter = 0;
                x = -1; y = -1;
                for (var i = 0; i < BOARD.Length; i++) {
                    for (var j = 0; j < BOARD[i].Length; j++) {
                        if (BOARD[i][j] == " ") {
                            x = i; y = j;
                            counter++;
                        }
                    }
                }
                if (counter == 1)
                    return true;
                return false;
            }

            private int CheckEndGame() {
                if (CheckEndHorizontal(USERSYMBOL, STRAIGHT) || CheckEndVertical(USERSYMBOL, STRAIGHT) || CheckEndDiagonal(USERSYMBOL, STRAIGHT)) {
                    EndGame(USERSYMBOL);
                    return (int)Score.Win;
                }
                else if (CheckEndHorizontal(COMPUTERSYMBOL, STRAIGHT) || CheckEndVertical(COMPUTERSYMBOL, STRAIGHT) || CheckEndDiagonal(COMPUTERSYMBOL, STRAIGHT)) {
                    EndGame(COMPUTERSYMBOL);
                    return (int)Score.Loose;
                }
                else if (BoardFull()) {
                    EndGame("draw");
                    return (int)Score.Draw;
                }
                return 0;
            }

            private bool AvoidLoose(ref int x, ref int y) {
                if (CheckHorizontal(ref x, ref y, COMPUTERSYMBOL, STRAIGHT) || CheckVertical(ref x, ref y, COMPUTERSYMBOL, STRAIGHT) || CheckDiagonal(ref x, ref y, COMPUTERSYMBOL, STRAIGHT))
                    return true;
                return false;
            }

            public bool CanWin(ref int x, ref int y) {
                if (CheckHorizontal(ref x, ref y, USERSYMBOL, STRAIGHT) || CheckVertical(ref x, ref y, USERSYMBOL, STRAIGHT) || CheckDiagonal(ref x, ref y, USERSYMBOL, STRAIGHT))
                    return true;
                return false;
            }


            private bool CheckEndHorizontal(string XO, int length) {
                for (var i = 0; i < BOARD.Length; i++) {
                    if (CheckLineForStraight(BOARD[i], XO, length)) {
                        return true;
                    }
                }
                return false;
            }

            private bool CheckEndDiagonal(string XO, int length) {
                for (var i = 0; i < BOARD.Length; i++) {
                    for (var j = 0; j < BOARD[i].Length; j++) {
                        var line = new string[BOARD_SIZE];
                        var counter = 0;
                        for (int k = i, l = j; k < BOARD.Length && l < BOARD[k].Length; k++, l++) {
                            line[counter] = BOARD[k][l];
                            counter++;

                        }
                        if (CheckLineForStraight(line, XO, length))
                            return true;
                    }
                }
                //left diagonal
                for (var i = 0; i < BOARD.Length; i++) {
                    for (var j = 0; j < BOARD[i].Length; j++) {
                        var line = new string[BOARD_SIZE];
                        var counter = 0;
                        for (int k = i, l = j; k < BOARD.Length && l >= 0; k++, l--) {
                            line[counter] = BOARD[k][l];
                            counter++;
                        }
                        if (CheckLineForStraight(line, XO, length))
                            return true;
                    }
                }
                return false;
            }

            public bool CheckHorizontal(ref int x, ref int y, string XO, int length) {
                for (var i = 0; i < BOARD.Length; i++) {
                    if (CheckLineForStraightNextTurn(BOARD[i], XO, length, ref y)) {
                        x = i;
                        return true;
                    }
                }
                return false;
            }

            private bool CheckLineForStraightNextTurn(string[] line, string XO, int length, ref int stepsX) {
                for (var i = 0; i < line.Length; i++) {
                    if (line[i] == " ") {
                        line[i] = XO;
                        var counter = 0;
                        for (var j = 0; j < line.Length; j++) {
                            if (line[j] == XO)
                                counter++;
                            else
                                counter = 0;//////////////////////////////////check 
                            if (counter == length) {
                                line[i] = " ";
                                stepsX = i;
                                return true;
                            }
                        }
                        line[i] = " ";
                    }
                }
                return false;
            }
            private bool CheckLineForStraight(string[] line, string XO, int length) {
                var total = 0;
                var biggest_total = 0;
                for (var i = 0; i < line.Length; i++) {
                    if (line[i] == XO)
                        total++;
                    if (total > biggest_total)
                        biggest_total = total;
                    if (line[i] != XO) {
                        total = 0;
                    }
                }
                if (biggest_total == length)
                    return true;
                return false;
            }
            private bool CheckEndVertical(string XO, int length) {
                string[] line = new string[BOARD_SIZE];
                for (var i = 0; i < BOARD.Length; i++) {
                    var counter = 0;
                    for (var j = 0; j < BOARD[i].Length; j++) {
                        line[counter] = BOARD[j][i];
                        counter++;
                    }
                    if (CheckLineForStraight(line, XO, length)) {
                        return true;
                    }
                }
                return false;
            }
            public bool CheckVertical(ref int x, ref int y, string XO, int length) {
                string[] line = new string[BOARD_SIZE];
                for (var i = 0; i < BOARD.Length; i++) {
                    var counter = 0;
                    for (var j = 0; j < BOARD[i].Length; j++) {
                        line[counter] = BOARD[j][i];
                        counter++;
                    }
                    if (CheckLineForStraightNextTurn(line, XO, length, ref x)) {
                        y = i;
                        return true;
                    }
                }
                return false;
            }

            public bool CheckDiagonal(ref int x, ref int y, string XO, int length) {
                //right diagonal
                for (var i = 0; i < BOARD.Length; i++) {
                    for (var j = 0; j < BOARD[i].Length; j++) {
                        var counter = 0;
                        string[] line = new string[BOARD_SIZE];
                        for (int k = i, l = j; k < BOARD.Length && l < BOARD[k].Length; k++, l++) {
                            line[counter] = BOARD[k][l];
                            counter++;
                        }
                        if (CheckLineForStraightNextTurn(line, XO, length, ref x)) {
                            var steps = x;
                            x = i + steps;
                            y = j + steps;
                            //y = i + x;
                            return true;
                        }
                    }
                }
                //left diagonal
                for (var i = 0; i < BOARD.Length; i++) {
                    for (var j = 0; j < BOARD[i].Length; j++) {
                        var counter = 0;
                        string[] line = new string[BOARD_SIZE];
                        for (int k = i, l = j; k < BOARD.Length && l >= 0; k++, l--) {
                            line[counter] = BOARD[k][l];
                            counter++;
                        }

                        if (CheckLineForStraightNextTurn(line, XO, length, ref x)) {
                            var steps = x;
                            x = i + steps;
                            y = j - steps;//j - (counter-1); //counter - x - 1;
                            return true;
                        }
                    }
                }

                return false;
            }

        }


    }
}
